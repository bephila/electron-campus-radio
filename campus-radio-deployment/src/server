const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');

class ServerManager {
  constructor() {
    this.servers = [];
    this.isShuttingDown = false;
  }

  async startAllServers() {
    try {
      // Start static server
      await this.startStaticServer();
      
      // Start WebSocket server  
      await this.startWebSocketServer();
      
      // Start streaming server
      await this.startStreamingServer();
      
      console.log('All servers started successfully');
    } catch (error) {
      console.error('Error starting servers:', error);
      throw error;
    }
  }

  startStaticServer() {
    return new Promise((resolve, reject) => {
      const serverPath = path.join(__dirname, 'static-server.js');
      const server = spawn('node', [serverPath], {
        cwd: __dirname,
        stdio: 'inherit'
      });

      server.on('error', reject);
      
      // Give it time to start
      setTimeout(() => {
        this.servers.push(server);
        resolve();
      }, 2000);
    });
  }

  startWebSocketServer() {
    return new Promise((resolve, reject) => {
      const serverPath = path.join(__dirname, 'websocket-server.js');
      const server = spawn('node', [serverPath], {
        cwd: __dirname,
        stdio: 'inherit'
      });

      server.on('error', reject);
      
      setTimeout(() => {
        this.servers.push(server);
        resolve();
      }, 1000);
    });
  }

  startStreamingServer() {
    return new Promise((resolve, reject) => {
      const serverPath = path.join(__dirname, 'streaming-server.js');
      const server = spawn('node', [serverPath], {
        cwd: __dirname,
        stdio: 'inherit'
      });

      server.on('error', reject);
      
      setTimeout(() => {
        this.servers.push(server);
        resolve();
      }, 1000);
    });
  }

  shutdown() {
    if (this.isShuttingDown) return;
    this.isShuttingDown = true;

    console.log('Shutting down all servers...');
    this.servers.forEach(server => {
      try {
        server.kill('SIGTERM');
      } catch (error) {
        console.error('Error killing server:', error);
      }
    });
  }
}

module.exports = ServerManager;